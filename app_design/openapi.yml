openapi: 3.1.0
info:
  title: Miliare Referral Network API
  version: 1.0.0
  description: |
    REST API used by the Next.js server for SSR data fetching and form submissions.
    Authentication is handled by AWS Cognito through Amplify. Referral data is
    retrieved from a separate GraphQL service.
servers:
  - url: https://api-dev.miliarereferral.com
security:
  - ApiKeyAuth: []
paths:
  /users/{userId}:
    get:
      summary: Get user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Cognito user sub
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    put:
      summary: Update user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Cognito user sub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: Updated
  /partners:
    post:
      summary: Create partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partner'
      responses:
        '201':
          description: Created
    get:
      summary: List partners
      responses:
        '200':
          description: Partner list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partner'
  /partners/{partnerId}:
    get:
      summary: Get partner
      parameters:
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Partner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
    put:
      summary: Update partner
      parameters:
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partner'
      responses:
        '200':
          description: Updated
  /customers:
    post:
      summary: Create customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Created
    get:
      summary: List customers
      responses:
        '200':
          description: Customer list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /customers/{customerId}:
    get:
      summary: Get customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      summary: Update customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Updated
  /lead/users:
    get:
      summary: List users assigned to a lead
      responses:
        '200':
          description: Lead user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeadUser'
  /referrals:
    post:
      summary: Create referral
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Referral'
      responses:
        '201':
          description: Created
    get:
      summary: List referrals
      responses:
        '200':
          description: Referral list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Referral'
  /referrals/{referralId}:
    get:
      summary: Get referral
      parameters:
        - name: referralId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Referral
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Referral'
    put:
      summary: Update referral
      parameters:
        - name: referralId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Referral'
      responses:
        '200':
          description: Updated
  /users/{userId}/payments:
    get:
      summary: Get payment history for a user (deprecated)
      deprecated: true
      description: |
        This endpoint has been replaced by the `payments` GraphQL query.
        Clients should migrate to the GraphQL API for payment data.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Cognito user sub
      responses:
        '410':
          description: Deprecated. Use GraphQL `payments` query instead.
  /docusign/envelopes:
    post:
      summary: Create DocuSign envelope
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocuSignEnvelopeRequest'
      responses:
        '201':
          description: Envelope created
  /docusign/envelopes/{envelopeId}:
    get:
      summary: Get envelope status
      parameters:
        - name: envelopeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Envelope status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocuSignEnvelopeStatus'
  /docusign/callback:
    post:
      summary: DocuSign webhook callback
      description: Receives status updates from DocuSign
      responses:
        '200':
          description: Callback processed
  /bonus-pools:
    post:
      summary: Create bonus pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusPool'
      responses:
        '201':
          description: Created
    get:
      summary: List bonus pools
      responses:
        '200':
          description: Bonus pool list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BonusPool'
  /bonus-pools/{poolId}:
    get:
      summary: Get bonus pool details
      parameters:
        - name: poolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bonus pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusPool'
    put:
      summary: Update bonus pool
      parameters:
        - name: poolId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusPool'
      responses:
        '200':
          description: Updated
  /bonus-pools/{poolId}/report:
    get:
      summary: Get bonus pool report
      parameters:
        - name: poolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bonus pool report
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        company:
          type: string
        uplineEVC:
          type: string
        uplineSMD:
          type: string
        bankInfoDocument:
          type: string
          description: DocuSign envelope ID for bank info form
        taxDocument:
          type: string
          description: DocuSign envelope ID for tax form
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
    Partner:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        status:
          type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
    Referral:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        customerId:
          type: string
        status:
          type: string
        amount:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - customerId
        - status
    Payment:
      type: object
      properties:
        id:
          type: string
        referralId:
          type: string
        userId:
          type: string
        amount:
          type: number
        date:
          type: string
          format: date-time
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - referralId
        - userId
        - amount
        - date
        - status
    BonusPool:
      type: object
      properties:
        id:
          type: string
        period:
          type: string
        amount:
          type: number
        distributions:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              amount:
                type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - period
        - amount
    DocuSignEnvelopeRequest:
      type: object
      properties:
        userId:
          type: string
        envelopeType:
          type: string
          description: Type of document (e.g., 1099, directDeposit)
      required:
        - userId
        - envelopeType
    DocuSignEnvelopeStatus:
      type: object
      properties:
        envelopeId:
          type: string
        status:
          type: string
        completedAt:
          type: string
          format: date-time
      required:
        - envelopeId
        - status
    LeadUser:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
      required:
        - id
        - name
        - email

